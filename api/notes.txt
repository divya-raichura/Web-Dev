APIs that meet the REST architectural style constrains are considered to be RESTfull

guiding architectural constrains required for an api to be RESTfull
{
    -client server architecture
    -statelessness
    -layered system
    -cacheability
    -uniform design
    -code on demand
}

like in web, client will make request to server, client in this case will typically be your program and you will probably use some sort of library, it is using http protocol and it's stateless, ie, server won't remember anything about a particular client, so to maintain state we use session ids, cookies and headers to do all these 

everything we see on a application is a resource/collection

most of what we want our apps to be able to do to their resources can be expressed through the acronym crud 

ur program sends a get req to uri and a response is recieved with data and headers. The body is represented as json

like in http, same verbs are used in apis to state the intention of request 
{
    post : create
    get : read
    put/patch : update
    delete : delete

    so we can represent crud using http methods

}

we can interact with any app that's exposed their rest api
we can grab data, remotely automate tasks and smush services together, this is called mashup

sdk stands for "software development kit" it gives us an api that wraps around other apis